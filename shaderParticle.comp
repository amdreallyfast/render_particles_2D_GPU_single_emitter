#version 440

// even though this is a 2D program, I wasn't able to figure out the byte misalignments 
// between C++ and GLSL (every variable is aligned on a 16byte boundry, but adding 2-float 
// padding to glm::vec2 didn't work and the compute shader just didn't send any particles 
// anywhere), so I just used glm::vec4 
struct Particle
{
    vec4 _position;
    vec4 _velocity;
    int _isActive;
};

// work item indices for the particle array
// Note: This layout must be specified in the following style.  Replacing "local_size_x" with 
// "localSizeX" results in a compile error.  The GLSL compiler reduces everything to lower case,
// so "local_Size_X" is still fine.
// Also Note: The sizes here MUST (??you sure??) match the work group sizes specified when 
// calling glDispatchCompute(...).
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0) buffer ParticleBuffer {
    Particle AllParticles[];
};

uniform float uDeltaTimeSec;     // self-explanatory
uniform float uRadiusSqr;
uniform vec4 uEmitterCenter;
uniform uint uMaxParticlesEmittedPerFrame;
uniform uint uMaxParticleCount;
//??layout atomic counter for particlesEmittedThisFrame? see https://www.opengl.org/wiki/Atomic_Counter ??

void main()
{
    // pluck out the index of the work item for this run of the shader
    // Note: I am dealing with a one dimensional array, and the only index variance was defined 
    // earlier to be in X, so pluck out the X.
    // Also Note: The number of dispatched work groups may result in an index that is beyond the 
    // maximum number of particles, so check the value against the max.
    uint index = gl_GlobalInvocationID.x;
    if (index < uMaxParticleCount)
    {
        // as OpenGL 4.4, compute shaders don't have C's idea of pointers or C++'s idea of 
        // reference, so make a copy of the particle, work with it, and copy it back in
        Particle p = AllParticles[index];

        // update position
        vec4 deltaPosition = p._velocity * uDeltaTimeSec;
        p._position = p._position + deltaPosition;
    
        // if it went out of bounds, restart it
        vec4 distToCenter = p._position - uEmitterCenter;
        float distSqr = dot(distToCenter, distToCenter);
        if (distSqr > uRadiusSqr)
        {
            // just a simple reset for now
            p._position = uEmitterCenter;
        }

        // copy it back in
        AllParticles[index] = p;
    }
}

