#version 430 core

struct Particle
{
    vec2 _position;
    vec2 _velocity;
    int _isActive;
};

// work item indices for the particle array
// Note: This layout must be specified in the following style.  Replacing "local_size_x" with 
// "localSizeX" results in a compile error.  The GLSL compiler reduces everything to lower case,
// so "local_Size_X" is still fine.
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer ParticleBuffer {
    Particle AllParticles[];
};

uniform float uDeltaTimeSec;     // self-explanatory
uniform float uRadiusSqr;
uniform vec2 uEmitterCenter;
uniform uint uMmaxParticlesEmittedPerFrame;
//??layout atomic counter for particlesEmittedThisFrame? see https://www.opengl.org/wiki/Atomic_Counter ??

void main()
{
    // pluck out the index of the work item for this run of the shader
    // Note: I am dealing with a one dimensional array, and the only index variance was defined 
    // earlier to be in X, so pluck out the X.
    uint index = gl_GlobalInvocationID.x;

    Particle p = AllParticles[index];
    p._position += (p._velocity * uDeltaTimeSec);
    
    vec2 distToCenter = p._position - uEmitterCenter;
    float distSqr = dot(distToCenter, distToCenter);
    if (distSqr > uRadiusSqr)
    {
        // just a simple reset for now
        p._position = uEmitterCenter;
    }
}

